gets stdin port

package req registry

proc GetEnvTcl { product } {
   
   set productKey     "HKEY_LOCAL_MACHINE\\SOFTWARE\\Ixia Communications\\$product"
   set versionKey     [ registry keys $productKey ]

   set latestKey ""
   foreach version $versionKey {
		if { [ regexp {^\d} $version ] } {
			set latestKey $version
		}
   }

   set installInfo    [ append productKey \\ $latestKey \\ InstallInfo ]            
   return             [ registry get $installInfo  HOMEDIR ]

}

proc GetLogByTestName { name } {
	set mtime 0
	set matchedFileName ""
	foreach f [glob nocomplain "*.*"] {
		#set f [file join $rootDir $f]
		if { [regexp "^${name}_.*" $f ] } {
			if { [file mtime $f] > $mtime } {
				set mtime [file mtime $f]
				set matchedFileName $f
			}
		}
	}
	
	set retLogStr ""
	if { $matchedFileName != "" } {
		if { [catch {open $matchedFileName r }  f ] } {
			puts "Could not open initialisation file $matchedFileName"
		} else {
			set retLogStr [string map {"\n" "###"} [read $f ]]
			close $f
		}
	}

	return $retLogStr
}

proc GetResultsByName { testName resultsName } {
	set mtime 0
	set matchedDirectoryName ""
	foreach f [glob nocomplain "*"] {
		if { [file isdirectory $f] } {
            if { [regexp "^${testName}@.*" $f ] } {
                if { [file mtime $f] > $mtime } {
                    set mtime [file mtime $f]
                    set matchedDirectoryName $f
                }
            }
        }
	}
	
	set retResultsStr ""
	if { $matchedDirectoryName != "" } {
		if { [catch {open [file join $matchedDirectoryName $resultsName] r }  f ] } {
			puts "Could not open initialisation file $matchedDirectoryName"
		} else {
			set retResultsStr [string map {"\n" "###"} [read $f ]]
			close $f
		}
	}

	return $retResultsStr
}

proc runTcl { chan addr port } {
	set cin [gets $chan]
    puts "$addr:$port - $cin"

	set timeVal  [ clock format [ clock seconds ] -format %T ]
	puts "<TIME:$timeVal><=\n${cin}"
	
	set result ""
	if { [ catch {
		set result [ eval $cin ]
	} err ] } {
		puts "<TIME:$timeVal>Err=>\n$err"
	} else {
		puts "<TIME:$timeVal>=>\n$result"
	}

	puts $chan $result
	close $chan

}

puts "socket on $port running:[ socket -server runTcl $port ]"

if { [ catch {
	source [ GetEnvTcl IxLoad ]tclscripts/bin/ixiawish.tcl
} err ] } {
	puts "load IxLoad package fail:$err"
}

vwait forever
